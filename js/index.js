// Generated by CoffeeScript 1.8.0
(function() {
  var $, C, Lite;

  Lite = {};

  $ = this.$ = function(selector) {
    selector = selector.trim();
    return Lite.C($.query(selector));
  };

  Lite.C = function(dom) {
    return new C(dom);
  };

  C = function(dom) {
    var i, len;
    len = dom ? dom.length : 0;
    for (i in dom) {
      this[i] = dom[i];
    }
    this.length = len;
    return this;
  };

  $.ready = function(callback) {
    if (/complete|loaded|interactive/.test(document.readyState) && document.body) {
      callback($);
    } else {
      document.addEventListener('DOMContentLoaded', function() {
        return callback($);
      }, false);
    }
    return this;
  };

  $.isArraylike = function(obj) {
    return typeof obj.length === 'number';
  };

  $.query = function(selector) {
    var found, isSimple, maybeClass, maybeID, nameOnly, result, simpleSelectorRE, slice;
    slice = Array.prototype.slice;
    simpleSelectorRE = /^[\w-]*$/;
    result = null;
    found = [];
    maybeID = selector[0] === '#';
    maybeClass = !maybeID && selector[0] === '.';
    nameOnly = maybeID || maybeClass ? selector.slice(1) : selector;
    isSimple = simpleSelectorRE.test(nameOnly);
    if (document.getElementById && isSimple && maybeID) {
      if (found = document.getElementById(nameOnly)) {
        return result = [found];
      } else {
        return [];
      }
    } else {
      if (isSimple && !maybeID && document.getElementsByClassName) {
        if (maybeClass) {
          result = document.getElementsByClassName(nameOnly);
        } else {
          result = document.getElementsByTagName(selector);
        }
      } else {
        result = document.querySelectorAll(selector);
      }
      return result = slice.call(result);
    }
  };

  $.fn = {
    constructor: Lite.Z,
    author: 'bq',
    length: 0,
    forEach: [].forEach,
    reduce: [].reduce,
    push: [].push,
    sort: [].sort,
    splice: [].splice,
    indexOf: [].indexOf,
    each: function(callback) {
      [].every.call(this, function(el, idx) {
        return callback.call(el, el, idx) !== false;
      });
      return this;
    },
    addClass: function(name) {
      if (!name) {
        return this;
      }
      return this.each(function(el, index) {
        return el.classList.add(name);
      });
    },
    removeClass: function(name) {
      if (!name) {
        return this;
      }
      return this.each(function(el, index) {
        return el.classList.remove(name);
      });
    },
    hasClass: function(name) {
      if (!name) {
        return this;
      }
      return this.each(function(el, index) {
        return el.classList.contains(name);
      });
    },
    toggleClass: function(name) {
      if (!name) {
        return this;
      }
      return this.each(function(el, index) {
        if (el.classList.contains(name)) {
          return el.classList.remove(name);
        } else {
          return el.classList.add(name);
        }
      });
    }
  };

  Lite.C.prototype = C.prototype = $.fn;

  $.Lite = Lite;

}).call(this);

//# sourceMappingURL=index.js.map
