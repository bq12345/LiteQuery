// Generated by CoffeeScript 1.9.1
(function() {
  var $, C, Lite, camelize, class2type, cssNumber, dasherize, isArray, maybeAddPx, type;

  Lite = {};

  $ = this.$ = function(selector) {
    selector = selector.trim();
    return Lite.C($.query(selector));
  };

  Lite.C = function(dom) {
    return new C(dom);
  };

  C = function(dom) {
    var i, len;
    len = dom ? dom.length : 0;
    for (i in dom) {
      this[i] = dom[i];
    }
    this.length = len;
    return this;
  };


  /*
    一些内部使用的方法及变量
   */

  class2type = {};

  cssNumber = {
    'column-count': 1,
    'columns': 1,
    'font-weight': 1,
    'line-height': 1,
    'opacity': 1,
    'z-index': 1,
    'zoom': 1
  };

  isArray = Array.isArray;

  "Boolean Number String Function Array Date RegExp Object Error".split(" ").forEach(function(name) {
    return class2type["[object " + name + "]"] = name.toLowerCase();
  });

  camelize = function(str) {
    return str.replace(/-+(.)?/g, function(match, chr) {
      if (chr) {
        return chr.toUpperCase();
      } else {
        return '';
      }
    });
  };

  dasherize = function(str) {
    return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\d])([A-Z])/g, '$1_$2').replace(/_/g, '-').toLowerCase();
  };

  type = function(obj) {
    if (obj === null) {
      return String(obj);
    } else {
      return class2type[{}.toString.call(obj)] || "object";
    }
  };

  maybeAddPx = function(name, value) {
    if (typeof value === "number" && !cssNumber[dasherize(name)]) {
      return value + "px";
    } else {
      return value;
    }
  };

  $.ready = function(callback) {
    if (/complete|loaded|interactive/.test(document.readyState) && document.body) {
      callback($);
    } else {
      document.addEventListener('DOMContentLoaded', function() {
        return callback($);
      }, false);
    }
    return this;
  };

  $.each = function(elements, callback) {
    var i, j, k, key, len1, ref;
    if ($.isArraylike(elements)) {
      for (i = j = 0, ref = elements.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (callback.call(elements[i], elements[i], i) === false) {
          return elements;
        }
      }
    } else {
      for (k = 0, len1 = elements.length; k < len1; k++) {
        key = elements[k];
        if (callback.call(elements[key], elements[key], key) === false) {
          return elements;
        }
      }
    }
    return elements;
  };

  $.isArraylike = function(obj) {
    return typeof obj.length === 'number';
  };

  $.query = function(selector) {
    var found, isSimple, maybeClass, maybeID, nameOnly, result, simpleSelectorRE, slice;
    slice = Array.prototype.slice;
    simpleSelectorRE = /^[\w-]*$/;
    result = null;
    found = [];
    maybeID = selector[0] === '#';
    maybeClass = !maybeID && selector[0] === '.';
    nameOnly = maybeID || maybeClass ? selector.slice(1) : selector;
    isSimple = simpleSelectorRE.test(nameOnly);
    if (document.getElementById && isSimple && maybeID) {
      if (found = document.getElementById(nameOnly)) {
        return result = [found];
      } else {
        return [];
      }
    } else {
      if (isSimple && !maybeID && document.getElementsByClassName) {
        if (maybeClass) {
          result = document.getElementsByClassName(nameOnly);
        } else {
          result = document.getElementsByTagName(selector);
        }
      } else {
        result = document.querySelectorAll(selector);
      }
      return result = slice.call(result);
    }
  };

  $.fn = {
    author: 'bq',
    length: 0,
    forEach: [].forEach,
    reduce: [].reduce,
    push: [].push,
    sort: [].sort,
    splice: [].splice,
    indexOf: [].indexOf,
    each: function(callback) {
      [].every.call(this, function(el, idx) {
        return callback.call(el, el, idx) !== false;
      });
      return this;
    },
    addClass: function(name) {
      if (!name) {
        return this;
      }
      return this.each(function(el, index) {
        return el.classList.add(name);
      });
    },
    removeClass: function(name) {
      if (!name) {
        return this;
      }
      return this.each(function(el, index) {
        return el.classList.remove(name);
      });
    },
    hasClass: function(name) {
      if (!name) {
        return this;
      }
      return this.each(function(el, index) {
        return el.classList.contains(name);
      });
    },
    toggleClass: function(name) {
      if (!name) {
        return this;
      }
      return this.each(function(el, index) {
        if (el.classList.contains(name)) {
          return el.classList.remove(name);
        } else {
          return el.classList.add(name);
        }
      });
    },
    css: function(property, value) {
      var computedStyle, css, element, key, props;
      if (arguments.length < 2) {
        element = this[0];
        if (!element) {
          return;
        }
        computedStyle = getComputedStyle(element, '');
        if (typeof property === 'string') {
          return element.style[camelize(property)] || computedStyle.getPropertyValue(property);
        } else {
          if (isArray(property)) {
            props = {};
            $.each(property, function(prop) {
              return props[prop] = element.style[camelize(prop)] || computedStyle.getPropertyValue(prop);
            });
            props;
          }
        }
      }
      css = '';
      if (type(property) === 'string') {
        if (!value && value !== 0) {
          this.each(function() {
            return this.style.removeProperty(dasherize(property));
          });
        } else {
          css = dasherize(property) + ":" + maybeAddPx(property, value);
        }
      } else {
        for (key in property) {
          value = property[key];
          if (!value && value !== 0) {
            this.each(function() {
              return this.style.removeProperty(dasherize(key));
            });
          } else {
            css += dasherize(key) + ':' + maybeAddPx(key, value) + ';';
          }
        }
      }
      return this.each(function() {
        return this.style.cssText += ';' + css;
      });
    }
  };

  Lite.C.prototype = C.prototype = $.fn;

  $.Lite = Lite;

}).call(this);

//# sourceMappingURL=index.js.map
